<Playlist Version="1.0">
  <Add Test="AngleTests.ToDms.It return all zero when given zero." />
  <Add Test="AngleTests.ToDms.It return two hundred seventy degrees when give three halves pi." />
  <Add Test="AngleTests.ToDms.It returns ninety degrees when given half pi." />
  <Add Test="AngleTests.ToDms.It returns one hundred eighty degrees when given pi." />
  <Add Test="AngleTests.ToFloat.It returns 0 when given zeros." />
  <Add Test="AngleTests.ToFloat.It returns half pi when given ninety degrees." />
  <Add Test="AngleTests.ToFloat.It returns pi when given one hundred eighty degrees." />
  <Add Test="AngleTests.ToFloat.It returns three halves pi when given two hundred seventy degrees." />
  <Add Test="AngleTests.ToString.It formats degrees minutes and seconds." />
  <Add Test="AvatarTests.AbandonJob.It does nothing when the given avatar has no job." />
  <Add Test="AvatarTests.AbandonJob.It set job to None when the given avatar has a job." />
  <Add Test="AvatarTests.AddInventory.It adds a given number of given items to the given avatar's inventory." />
  <Add Test="AvatarTests.AddMessages.It adds messages to a given avatar." />
  <Add Test="AvatarTests.AddMetric.It adds to a metric value when there is a previously existing metric value in the avatar's table." />
  <Add Test="AvatarTests.AddMetric.It creates a metric value when there is no previously existing metric value in the avatar's table." />
  <Add Test="AvatarTests.ALIVE/ZERO_HEALTH/OLD_AGE.It returns a ALIVE when given an avatar with above minimum health and not end of life." />
  <Add Test="AvatarTests.ALIVE/ZERO_HEALTH/OLD_AGE.It returns a OLD_AGE when given an avatar at maximum turn." />
  <Add Test="AvatarTests.ALIVE/ZERO_HEALTH/OLD_AGE.It returns a ZERO_HEALTH when given an avatar at minimum health (zero)." />
  <Add Test="AvatarTests.CleanHull.It cleans the hull of the given avatar." />
  <Add Test="AvatarTests.CompleteJob.It does nothing when the given avatar has no job." />
  <Add Test="AvatarTests.CompleteJob.It sets job to None, adds reward money, adds reputation and metrics when the given avatar has a job." />
  <Add Test="AvatarTests.Create.It creates an avatar." />
  <Add Test="AvatarTests.EarnMoney.It has no effect when given a negative amount to earn." />
  <Add Test="AvatarTests.EarnMoney.It updates the avatars money by adding the given amount." />
  <Add Test="AvatarTests.GetCurrentFouling.It returns the current fouling for the Avatar." />
  <Add Test="AvatarTests.GetEffectiveSpeed.It returns full speed when there is no fouling." />
  <Add Test="AvatarTests.GetEffectiveSpeed.It returns proportionally reduced speed when there is fouling." />
  <Add Test="AvatarTests.GetHeading.It gets the heading of an avatar." />
  <Add Test="AvatarTests.GetItemCount.It returns the item count when the given avatar has an entry for the given item." />
  <Add Test="AvatarTests.GetItemCount.It returns zero when the given avatar has no entry for the given item." />
  <Add Test="AvatarTests.GetMaximumFouling.It returns the maximum fouling for the Avatar." />
  <Add Test="AvatarTests.GetMoney.It retrieves the money of the primary shipmate." />
  <Add Test="AvatarTests.GetPosition.It gets the position of an avatar." />
  <Add Test="AvatarTests.GetReputation.It retrieves the reputation of the primary shipmate." />
  <Add Test="AvatarTests.GetSpeed.It gets the speed of an avatar." />
  <Add Test="AvatarTests.GetUsedTonnage.It calculates the used tonnage based on inventory and item descriptors." />
  <Add Test="AvatarTests.Move.It lowers the avatar's maximum turn when the given avatar has no rations and minimum satiety." />
  <Add Test="AvatarTests.Move.It lowers the avatar's satiety but does not affect turns when the given avatar has no rations." />
  <Add Test="AvatarTests.Move.It moves the avatar." />
  <Add Test="AvatarTests.Move.It removes a ration and increases satiety when the given avatar has rations and less than full satiety." />
  <Add Test="AvatarTests.Move.It removes a ration when the given avatar has rations and full satiety." />
  <Add Test="AvatarTests.RemoveInventory.It reduces the given avatar's inventory by the given amount." />
  <Add Test="AvatarTests.RemoveInventory.It reduces the given avatars inventory to 0 when the given number of items exceed the avatar's inventory." />
  <Add Test="AvatarTests.SetHeading.It sets a given heading." />
  <Add Test="AvatarTests.SetJob.It sets the job of the given avatar." />
  <Add Test="AvatarTests.SetMoney.It assigns the amount of money of the primary shipmate." />
  <Add Test="AvatarTests.SetPosition.It sets a given position." />
  <Add Test="AvatarTests.SetReputation.It assigns the amount of reputation of the primary shipmate." />
  <Add Test="AvatarTests.SetSpeed.It sets all stop when given less than zero." />
  <Add Test="AvatarTests.SetSpeed.It sets all stop when given zero." />
  <Add Test="AvatarTests.SetSpeed.It sets full speed when given one." />
  <Add Test="AvatarTests.SetSpeed.It sets full speed when gives more than one." />
  <Add Test="AvatarTests.SetSpeed.It sets half speed when given half speed." />
  <Add Test="AvatarTests.SpendMoney.It has no effect when given a negative amount to spend." />
  <Add Test="AvatarTests.SpendMoney.It has no effect when the given avatar has no money." />
  <Add Test="AvatarTests.SpendMoney.It reduces the avatar's money to zero when the given amount exceeds the given avatar's money." />
  <Add Test="AvatarTests.SpendMoney.It updates the avatars money when the given amount is less than the given avatar's money." />
  <Add Test="AvatarTests.TransformStatistic.It does nothing when the given statistic is absent from the avatar." />
  <Add Test="AvatarTests.TransformStatistic.It replaces the statistic when that statistic is originally present in the avatar." />
  <Add Test="AvatarTests.RemoveInventory.It does nothing.When given a quantity of 0 items to remove or the given avatar has no items.(ulong.MinValue)" />
  <Add Test="AvatarTests.RemoveInventory.It does nothing.When given a quantity of 0 items to remove or the given avatar has no items.(1UL)" />
  <Add Test="IslandTests.AddVisit.It does not update visit count when given turn was prior or equal to last visit." />
  <Add Test="IslandTests.AddVisit.It increases visit count by one and sets last visit to given turn when the given turn is after the last visit." />
  <Add Test="IslandTests.AddVisit.It increases visit count by one and sets last visit to given turn when there is no last visit." />
  <Add Test="IslandTests.AddVisit.It increases visit count to one and sets last visit to given turn when there is no last visit and no visit count." />
  <Add Test="IslandTests.Create.It returns a new island." />
  <Add Test="IslandTests.GenerateCommodities.It does nothing when commodities already exists for the given island." />
  <Add Test="IslandTests.GenerateCommodities.It generates commodities when the given island has no commodities." />
  <Add Test="IslandTests.GenerateItems.It generates the shop when the given island has no items in the shop." />
  <Add Test="IslandTests.GenerateItems.It has no effect when the given island already has items in the shop." />
  <Add Test="IslandTests.GenerateJob.It does nothing when no job is present on the island and no potential job destinations are given." />
  <Add Test="IslandTests.GenerateJob.It generates a job when no job is present on the island." />
  <Add Test="IslandTests.GetDisplayName.It returns ???? when there is no visit count." />
  <Add Test="IslandTests.GetDisplayName.It returns the island's name when there is a visit count." />
  <Add Test="IslandTests.MakeKnown.It does nothing when the given island is already known." />
  <Add Test="IslandTests.MakeKnown.It mutates the island's visit count to Some 0 when the given island is not known." />
  <Add Test="IslandTests.MakeSeen.It does nothing when the given island is already known." />
  <Add Test="IslandTests.MakeSeen.It does nothing when the given island is already seen." />
  <Add Test="IslandTests.MakeSeen.It mutates the island's visit count to None when the given island is not known or seen." />
  <Add Test="IslandTests.RemoveJob.It returns the modified island and the indicated job when the given job index is in range." />
  <Add Test="IslandTests.RemoveJob.It returns the original island and None when the given job index is 0u." />
  <Add Test="IslandTests.RemoveJob.It returns the original island and None when there are no jobs on the given island." />
  <Add Test="IslandTests.RemoveJob.It returns the original island and None whenthe given job index is out of range." />
  <Add Test="IslandTests.SetName.It sets the name of a given island to a given name." />
  <Add Test="IslandTests.UpdateMarketForItemPurchase.It updates market commodity supply based on the given number of units purchased." />
  <Add Test="IslandTests.UpdateMarketForItemSale.It updates market commodity demands based on the given number of units sold." />
  <Add Test="ItemTests.DeterminePurchasePrice.It calculates the purchase price of an item in a given set of markets with given commodities." />
  <Add Test="ItemTests.DetermineSalePrice.It calculates the sale price of an item in a given set of markets with given commodities." />
  <Add Test="JobTests.Create.It generates a job." />
  <Add Test="JobTests.Create.It throws an exception when an empty set of destinations is given." />
  <Add Test="LocationTests.DistanceTo.It returns the distance between two given locations." />
  <Add Test="LocationTests.HeadingTo.It returns the direction in radians from a given location to another given location." />
  <Add Test="LocationTests.ScaleBy.It returns the product of a given location by a given scale." />
  <Add Test="MarketTests.ChangeDemand.It adds the given demand to the given markets demand and returns the resulting market." />
  <Add Test="MarketTests.ChangeSupply.It adds the given supply to the given markets supply and returns the resulting market." />
  <Add Test="MarketTests.DeterminePurchasePrice.It calculates the buying price for the described commodity in the given market." />
  <Add Test="MarketTests.DetermineSalePrice.It calculates the selling price for the the described commodity in the given market." />
  <Add Test="StatisticTest.ChangeCurrentBy.It changes the current value by the given delta." />
  <Add Test="StatisticTest.ChangeCurrentBy.It will not change the current value above the maximum." />
  <Add Test="StatisticTest.ChangeCurrentBy.It will not change the current value below the minimum." />
  <Add Test="StatisticTest.ChangeMaximumBy.It changes the maximum value by the given delta." />
  <Add Test="StatisticTest.ChangeMaximumBy.It will not change the maximum value below the minimum." />
  <Add Test="StatisticTest.Create.It allows current to be between minimum and maximum." />
  <Add Test="StatisticTest.Create.It will not allow current to be greater than maximum." />
  <Add Test="StatisticTest.Create.It will not allow current to be less than minimum." />
  <Add Test="StatisticTest.Create.It will not allow maximum to be less than minimum." />
  <Add Test="StatisticTest.CreateFromTemplate.It creates a statistic from a statistic template." />
  <Add Test="StatisticTest.GetCurrentValue.It returns the current value of the given statistic." />
  <Add Test="StatisticTest.GetMaximumValue.It returns the maximum value of the given statistic." />
  <Add Test="StatisticTest.SetCurrentValue.It sets the current value of the given statistic." />
  <Add Test="VesselTests.Befoul.It increases how fouled the vessel's hull is by the vessel's foul rate." />
  <Add Test="VesselTests.Befoul.It will not increase the vessel's fouling when the vessel is already at maximum fouling." />
  <Add Test="VesselTests.Create.It creates a vessel." />
  <Add Test="VesselTests.TransformFouling.It transforms fouling on the port side when the port side is specified." />
  <Add Test="VesselTests.TransformFouling.It transforms fouling on the starboard side when the starboard side is specified." />
  <Add Test="WorldTests.AbandonJob.It adds a message when the avatar has no job." />
  <Add Test="WorldTests.AbandonJob.It adds a messages and abandons the job when the avatar has a a job" />
  <Add Test="WorldTests.AcceptJob.It adds a message to the world when given an 0 job index for the given valid island location." />
  <Add Test="WorldTests.AcceptJob.It adds a message to the world when given an invalid job index for the given valid island location." />
  <Add Test="WorldTests.AcceptJob.It adds a message to the world when the job is valid but the avatar already has a job." />
  <Add Test="WorldTests.AcceptJob.It adds the given job to the avatar and eliminates it from the island's job list when given a valid island location and a valid job index and the avatar has no current job." />
  <Add Test="WorldTests.AcceptJob.It does nothing when given an invalid avatar id." />
  <Add Test="WorldTests.AcceptJob.It does nothing when given an invalid island location." />
  <Add Test="WorldTests.AddMessages.It appends new messages to previously existing messages in the world." />
  <Add Test="WorldTests.BuyItems.It gives a message and completes the purchase when the avatar has sufficient funds." />
  <Add Test="WorldTests.BuyItems.It gives a message indicating purchased quantity and completes the purchase when the avatar has sufficient funds for at least one and has specified a maximum buy." />
  <Add Test="WorldTests.BuyItems.It gives a message when given a bogus island location." />
  <Add Test="WorldTests.BuyItems.It gives a message when given a valid island location and a bogus item to buy." />
  <Add Test="WorldTests.BuyItems.It gives a message when the avatar has insufficient funds for a single unit when specifying a maximum buy." />
  <Add Test="WorldTests.BuyItems.It gives a message when the avatar has insufficient funds." />
  <Add Test="WorldTests.BuyItems.It gives a message when the avatar has insufficient tonnage." />
  <Add Test="WorldTests.CleanHull.It returns a cleaned hull when given a particular avatar id and world." />
  <Add Test="WorldTests.CleanHull.It returns the original world when given a bogus avatar id and world." />
  <Add Test="WorldTests.ClearMessages.It removes any messages from the given avatar in the world." />
  <Add Test="WorldTests.Create.It creates a new world." />
  <Add Test="WorldTests.DistanceTo.It adds a 'distance to island' message when given a valid island name that is known." />
  <Add Test="WorldTests.DistanceTo.It adds a 'unknown island' message when given a bogus island name." />
  <Add Test="WorldTests.DistanceTo.It adds a 'unknown island' message when given a valid island name that is not known." />
  <Add Test="WorldTests.Dock.It adds a message and completes the job when given avatar has a job for this location." />
  <Add Test="WorldTests.Dock.It adds a message when the given location has no island." />
  <Add Test="WorldTests.Dock.It does not modify avatar when given avatar has a job for a different destination." />
  <Add Test="WorldTests.Dock.It does nothing when given an invalid avatar id." />
  <Add Test="WorldTests.Dock.It updates the island's visit count and last visit when the given location has an island." />
  <Add Test="WorldTests.GetNearbyLocations.It returns locations within a given distance from another given location." />
  <Add Test="WorldTests.HeadFor.It adds a message when the island name does not exist." />
  <Add Test="WorldTests.HeadFor.It adds a message when the island name exists but is not known." />
  <Add Test="WorldTests.HeadFor.It sets the heading when the island name exists and is known." />
  <Add Test="WorldTests.IsAvatarAlive.It returns a false when given a world with an avatar minimum health (zero)." />
  <Add Test="WorldTests.IsAvatarAlive.It returns a true when given a world with an avatar with above minimum health." />
  <Add Test="WorldTests.Move.It does nothing when given an invalid avatar id" />
  <Add Test="WorldTests.Move.It moves the avatar almost two units when give 2u for distance." />
  <Add Test="WorldTests.Move.It moves the avatar one unit when give 1u for distance when given a valid avatar id." />
  <Add Test="WorldTests.SellItems.It gives a message and completes the sale when the avatar has sufficient quantity." />
  <Add Test="WorldTests.SellItems.It gives a message and completes the salewhen the avatar has sufficient quantity and specified a maximum sell." />
  <Add Test="WorldTests.SellItems.It gives a message when given a bogus island location." />
  <Add Test="WorldTests.SellItems.It gives a message when given a valid island location and bogus item to buy." />
  <Add Test="WorldTests.SellItems.It gives a message when the avatar has insufficient items in inventory." />
  <Add Test="WorldTests.SellItems.It gives a message when the avatar has no items in inventory and specifies maximum." />
  <Add Test="WorldTests.SetHeading.It does nothing when given an invalid avatar id" />
  <Add Test="WorldTests.SetHeading.It sets a new heading when given a valid avatar id." />
  <Add Test="WorldTests.SetIsland.It adds an island to a world when given an island where there was none." />
  <Add Test="WorldTests.SetIsland.It removes an island to a world when given none where there was one before." />
  <Add Test="WorldTests.SetIsland.It replaces an island to a world when given an island where there was one before." />
  <Add Test="WorldTests.SetSpeed.It does nothing when a bogus avatarid is passed." />
  <Add Test="WorldTests.SetSpeed.It produces all stop in the avatar when less than zero is passed." />
  <Add Test="WorldTests.SetSpeed.It produces full speed when greater than one is passed." />
  <Add Test="WorldTests.SetSpeed.It produces full speed when one is passed." />
  <Add Test="WorldTests.SetSpeed.It produces half speed when one half is passed." />
  <Add Test="WorldTests.SetSpeed.It sets all stop when given zero" />
  <Add Test="WorldTests.TransformAvatar.It transforms the avatar within the given world." />
  <Add Test="WorldTests.TransformIsland.It applies a transform function to an existing island and removes the island when the transformer returns None." />
  <Add Test="WorldTests.TransformIsland.It applies a transform function to an existing island and updates the island to the transformed value." />
  <Add Test="WorldTests.TransformIsland.It does nothing when the location given does not have an existing island." />
  <Add Test="WorldTests.UpdateChart.It does nothing when the given avatar has already seen all nearby islands." />
  <Add Test="WorldTests.UpdateChart.It does nothing when the given avatar is not near any nearby islands." />
  <Add Test="WorldTests.UpdateChart.It does sets all nearby island to &quot;seen&quot; when given avatar is near previously unseen islands." />
</Playlist>