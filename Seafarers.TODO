Persistence:
    Save the game:
        ☐ issuing the save command persists the world to a sqlite database
          ☐ avatars table
              (avatarid) PK
              (worldid) FK
              (avatarname) AK
              (turn)
              position x
              position y
              heading
              speed
              viewdistance
              dockdistance
              money
              reputation
          ☐ avatarjobs table
              description
              destination x
              destination y
              reward
          ☐ avatarinventory table
              itemid
              count
          ☐ avatarstatistic table
              statisticid
              minimum
              maximum
              current
          ☐ islands table
              position x
              position y
              name
              visit count
              last visit
          ☐ islanditems 
              itemid
          ☐ islandmarkets
              commodityid
              supply
              demand
              traded
    ☐ load the game
    ☐ permadeath?
        permadeath means that the file loaded is deleted 
    ☐ autosave?
Avatar Longevity:
    ☐ avatar needs a maximum turn value
    ☐ do not lose health when satiety is zero
    ☐ decrease maximum turn when satiety is zero
    ☐ avatar death occurs when turn=>maximum turn
    ☐ need a decent value for maximum turn that makes eating worth it, currently looking at 15000
    ☐ need some other penalty for being hungry that is impactful to the player in the short term
Buy Maximum and Sell All:
    ☐ buy maximum will buy as many of the item as can be afforded and carried
    ☐ sell all will sell all of the item stored
Avatar Ships:
    ☐ avatars have ships
    ☐ ships have maximum carrying capacity
    ☐ items require carrying capacity
    ☐ buying things will not be allowed if it will exceed the capacity
    ☐ carrying capacity is on the status screen
Quests/Jobs:
    ☐ some jobs have a minimum reputation requirement
Resting at an Inn:
    ☐ islands have inns
        do _all_ of them?
    ☐ resting at an inn costs money!
    ☐ there is a untradable commodity driving the price of staying at an inn
    ☐ resting at an inn increases health
Island Notes:
    ☐ Add island note command
    ☐ List island notes command
Refactor "Opportunities":
    ☐ split out the view portion of the game state handler from the command handling portion
        first, based on gamestate, show the view, and the view indicates whether or not there needs to be command input prior to the next game state
        second, when indicated by the view, collect a command from the source, and apply it 
Eliminate Hardcoded Values:
    ☐ Avatar.ViewDistance
    ☐ Avatar.DockDistance
Weird Edge Case Behavior:
    ☐ When AtSea, docking will happen with the "furthest" of all of the dockable islands. because of how the world is generated, there "should not" be more than one. however, this is not technically so.
Archive:
  ✘ trading raw commodities takes place at the "exchange" @cancelled(20-07-10 10:56) @project(Commodities)
  ✔ if all trades are due to items, is there a need for a prices command? @done(20-07-11 05:04) @project(Commodities)
  ✔ if there is no need for a prices command, does there need to be an occurrence probability on the commodity? @done(20-07-11 05:19) @project(Commodities)
    also eliminates "traded" from market
  ✔ there is no need to have a separate inventory for commodity hauls @done(20-07-11 05:06) @project(Commodities)
    we can simply have things like "sacks of grain" or "barrels of fish" or whatever
  ✔ merge shop and dock together? @done(20-07-11 05:57) @project(Commodities)
  ✔ commodity enum makes no sense... this can just be an int @done(20-07-11 04:53) @project(Refactor "Opportunities")
  ✔ item enum makes no sense... this can just be an int @done(20-07-11 04:53) @project(Refactor "Opportunities")
  ✔ without a specific rations item, there needs to be a way to specify which item to eat @done(20-07-11 04:53) @project(Refactor "Opportunities")
  ✘ Prices command may be better named commodities @cancelled(20-07-11 04:13) @project(Refactor "Opportunities")
  ✘ commodity price list may need to be accessible from multiple locations @cancelled(20-07-11 04:13) @project(Refactor "Opportunities")
  ✔ how do we increase health? @done(20-07-11 05:05) @project(Weird Edge Case Behavior)
    at inns
  ✔ world table @done(20-07-08 09:34) @project(Persistence.Save the game)
    (worldid) PK
    (worldname)
    (timestamp)
    rewardminimum
    rewardmaximum
  ✘ messages table(Not stored) @cancelled(20-07-08 09:32) @project(Persistence.Save the game)
    message
  ✔ worldcommodities table @done(20-07-10 06:07) @project(Persistence.Save the game)
    commodityid
    name
    baseprice
    purchasefactor
    salefactor
    discount
    occurrence
  ✔ worlditems table @done(20-07-10 06:07) @project(Persistence.Save the game)
    itemid
    displayname
    occurrence
  ✔ worlditemcommodities @done(20-07-10 06:07) @project(Persistence.Save the game)
    itemid
    commodityid
    units
  ✔ turn becomes part of the avatar @done(20-07-09 06:29) @project(Avatar Longevity)
  ✔ on the islands list, indicate visually the destination of the current job @done(20-07-07 10:49) @project(Refactor "Opportunities")
  ✔ move turn from world to avatar @done(20-07-09 06:29) @project(Refactor "Opportunities")
  ✔ move messages from world to avatar @done(20-07-09 06:29) @project(Refactor "Opportunities")
  ✔ shift island visit count and last visit to per avatar @done(20-07-09 09:12) @project(Refactor "Opportunities")
  ✔ there is a save command @done(20-07-07 04:53) @project(Persistence.Save the game)
  ✔ i can issue the save command from the main menu @done(20-07-07 05:10) @project(Persistence.Save the game)
  ✔ the save game state returns to the main menu when it is finished @done(20-07-07 05:21) @project(Persistence.Save the game)
  ✔ when health is at its minimum and there is hunger, the avatar dies and the game is over\ @done(20-07-06 06:12) @project(Satiety/Health)
  ✔ there is an game over gamestate @done(20-07-06 06:05) @project(Satiety/Health)
  ✔ when at any in play game state(At Sea, Docked, Shop), check if the avatar is dead, and switch to the game over game state @done(20-07-06 06:05) @project(Satiety/Health)
  ✔ from the gameover state, display a message and go to the main menu @done(20-07-06 06:06) @project(Satiety/Health)
  ✔ the messages shown when the game is over include any world messages for the last move, plus a cause of death @done(20-07-06 06:12) @project(Satiety/Health)
  ✔ the avatar has a satiety stat @done(20-07-05 05:29) @project(Satiety/Health)
  ✔ the avatar has a health stat @done(20-07-05 05:29) @project(Satiety/Health)
  ✔ avatars hunger and health stats show up in the status command @done(20-07-05 05:53) @project(Satiety/Health)
  ✔ the avatar may buy rations at islands @done(20-07-05 05:53) @project(Satiety/Health)
  ✔ the avatar eats one ration per turn @done(20-07-06 04:18) @project(Satiety/Health)
  ✔ if there is no ration, satiety goes down by one @done(20-07-06 04:18) @project(Satiety/Health)
  ✔ if there is a ration, satieity goes up by one @done(20-07-06 04:18) @project(Satiety/Health)
  ✔ there is a maximum satiety @done(20-07-05 05:54) @project(Satiety/Health)
  ✔ there is a maximum health @done(20-07-05 05:54) @project(Satiety/Health)
  ✔ there is a minimum satieity @done(20-07-05 05:54) @project(Satiety/Health)
  ✔ when satiety is at its minimum and there is hunger, health goes down by 1 @done(20-07-06 04:18) @project(Satiety/Health)
  ✔ rations are items made of grain @done(20-07-05 05:54) @project(Satiety/Health)
  ✘ items can be bought and sold @cancelled(20-07-02 06:39) @project(Items)
  ✔ the item prices are based on the commodity prices @done(20-07-02 06:38) @project(Items)
  ✔ items are held in an inventory @done(20-07-02 06:38) @project(Items)
  ✔ there is an inventory command @done(20-07-02 06:38) @project(Items)
  ✔ inventory list may be viewed from atsea, docked, and shop @done(20-07-02 06:38) @project(Items)
  ✔ there is a buy command for purchasing items @done(20-07-02 06:34) @project(Items)
  ✔ at a shop, the buy command buys items @done(20-07-05 05:08) @project(Items)
  ✔ there is a sell command for selling items @done(20-07-02 06:38) @project(Items)
  ✔ at a shop, the sell command sells items @done(20-07-05 05:08) @project(Items)
  ✔ the item shop is determined when first docking @done(20-07-02 04:42) @project(Items)
  ✔ there is a shop command @done(20-07-02 04:42) @project(Items)
  ✔ when at the shop the items command shows a list of items for sale at that island and their prices @done(20-07-02 04:42) @project(Items)
  ✔ commodities have a base price(exist per world) @done(20-06-28 04:40) @project(Commodities)
  ✔ commodities have a name @done(20-06-28 04:40) @project(Commodities)
  ✔ commodities have a supply factor for each unit sold(exist per world) @done(20-06-28 04:40) @project(Commodities)
  ✔ commodities have a demand factor for each unit bought(exist per world) @done(20-06-28 04:40) @project(Commodities)
  ✔ commodities have a markup @done(20-06-28 04:40) @project(Commodities)
  ✔ commodities have a different demand for each island (3d6) @done(20-06-28 04:43) @project(Commodities)
  ✔ commodities have a different supply for each island (3d6) @done(20-06-28 04:43) @project(Commodities)
  ✔ there is a small chance per island that a commodities is not traded @done(20-06-28 04:42) @project(Commodities)
  ✔ there is a prices command @done(20-06-29 04:55) @project(Commodities)
  ✔ prices command only works when docked @done(20-06-29 04:55) @project(Commodities)
  ✔ the prices command shows the different per unit prices of commodities on the island @done(20-06-29 04:55) @project(Commodities)
  ✔ supply and demand for commodities is calculated at first dock? @done(20-06-28 05:41) @project(Commodities)
  ✔ items consist of different commodity amount and are priced accordingly @done(20-06-30 06:15) @project(Items)
  ✔ there is a "shop" to buy and sell inventory items @done(20-06-30 06:15) @project(Items)
  ✔ an item has a particular chance of being bought/sold at a given island @done(20-06-30 06:15) @project(Items)
  ✔ there is an items command @done(20-06-30 06:15) @project(Items)
  ✘ confirm abandoning job, kinda like confirm quit @cancelled(20-06-27 07:29) @project(Quests)
  ✔ job flavor text @done(20-06-27 08:06) @project(Quests)
    "please deliver this (adverb) (adjective) (noun) to (name) the (profession) on the island of (island name)"
  ✔ avatars have money @done(20-06-23 07:04) @project(Quests)
  ✔ avatars have reputation @done(20-06-23 07:04) @project(Quests)
  ✔ status command @done(20-06-23 06:44) @project(Quests.Status)
  ✔ status command parser @done(20-06-23 06:44) @project(Quests.Status)
  ✔ status controller reporting gamestate that shows things like money and reputation @done(20-06-23 07:03) @project(Quests.Status)
  ✔ status can be called from AtSea or Docked @done(20-06-23 07:03) @project(Quests.Status)
  ✔ avatars have jobs @done(20-06-24 06:00) @project(Quests)
    an avatar can have up to one quest at a time
  ✔ a quest is a "delivery" to another island @done(20-06-25 04:53) @project(Quests)
    there is a given amount of pay for making the delivery
  ✔ completing a job upon docking @done(20-06-27 06:47) @project(Quests)
    the avatar gets reputation based on successful delivery
    ontime delivery for full reward, late reward for late delivery
    late delivery == no reputation gain
  ✔ able to abandon job @done(20-06-27 05:57) @project(Quests)
    the avatar loses reputation if he abandons a quest early
  ✔ multiple jobs can be available on an island @done(20-06-24 06:00) @project(Quests)
    what does reputation help with? (more high paid jobs in the future?)
    an island has... a number of jobs
  ✔ command to show availabe jobs in islands? @done(20-06-25 04:51) @project(Quests)
  ✔ how are jobs generated in islands? @done(20-06-24 05:59) @project(Quests)
    when docking
  ✔ show current job, if any on the status screen @done(20-06-26 06:50) @project(Quests)
  ✔ abandon job command @done(20-06-27 05:57) @project(Quests)
    while docked or at sea
  ✔ jobs command while at dock @done(20-06-25 04:53) @project(Quests)
    shows available jobs, but only ones that the avatar qualifies for
  ✔ accept job command @done(20-06-26 06:24) @project(Quests)
    in order to differentiate, we need a way to identify jobs in the island list
  ✔ accepting job makes destination known (0 visit count) @done(20-06-26 06:46) @project(Quests)
  ✔ accepting job removes job from island @done(20-06-26 06:24) @project(Quests)
  ✔ accepting job add job to avatar @done(20-06-26 06:24) @project(Quests)
  ✔ avatar may not accept a job if he already has one accepted @done(20-06-26 06:59) @project(Quests)
  ✔ make a "head for job" command @done(20-06-27 06:56) @project(Quests)
  ✔ add a distance parameter to the move command @done(20-06-27 07:08) @project(Quests)
  ✘ Should I be testing the output of the Controllers? Or does that make the tests too brittle? @cancelled(20-06-25 04:53) @project(Weird Edge Case Behavior)
  ✔ Docked help @done(20-06-22 06:37) @project(Help State)
  ✔ Each island has a visit count that is a uint32 option @done(20-06-22 06:45) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ Each island has a last visited count indicating the turn that the island was visited on @done(20-06-22 06:45) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ Islands on the at sea screen show ???? when visit count is None @done(20-06-22 16:18) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ Islands on the at sea screen show the name when visit count is Some @done(20-06-22 16:18) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ In the docked state, the status shows how many times you have visited @done(20-06-22 06:48) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ Docking with an island will increase the visit count, but only if the turn is different from the last visit @done(20-06-22 16:18) @project(Basic Gameplay.Known and Unknown Islands)
  ✔ A command is needed to list known islands. this command needs to be paged sections of 20 @done(20-06-22 16:58) @project(Basic Gameplay.Known and Unknown Islands.Known Islands List)
    'islands [page]'
  ✔ Islands parsing @done(20-06-22 16:58) @project(Basic Gameplay.Known and Unknown Islands.Known Islands List)
  ✔ AtSea Parsing Islands command @done(20-06-23 04:59) @project(Basic Gameplay.Known and Unknown Islands.Known Islands List)
  ✔ IslandList Gamestate @done(20-06-23 04:59) @project(Basic Gameplay.Known and Unknown Islands.Known Islands List)
  ✔ IslandList View Handler @done(20-06-23 04:59) @project(Basic Gameplay.Known and Unknown Islands.Known Islands List)
  ✔ A command is needed to head for a known island based on the island's name @done(20-06-23 06:19) @project(Basic Gameplay.Known and Unknown Islands.Head For Known Island)
    'head for [island]'
  ✔ HeadFor parsing @done(20-06-23 06:19) @project(Basic Gameplay.Known and Unknown Islands.Head For Known Island)
  ✔ HeadFor processing in World Service @done(20-06-23 06:19) @project(Basic Gameplay.Known and Unknown Islands.Head For Known Island)
  ✔ dock parsing @started(20-06-21 16:11) @done(20-06-21 16:16) @lasted(5m37s) @project(Basic Gameplay.Dock)
  ✔ undock parsing @started(20-06-21 16:11) @done(20-06-21 16:16) @lasted(5m39s) @project(Basic Gameplay.Dock)
  ✔ dock command processor in atsea @done(20-06-22 05:51) @project(Basic Gameplay.Dock)
  ✔ dock proximity @done(20-06-22 05:51) @project(Basic Gameplay.Dock)
  ✔ undock command @started(20-06-21 16:11) @done(20-06-21 16:16) @lasted(5m40s) @project(Basic Gameplay.Dock)
  ✔ dock command @started(20-06-21 16:11) @done(20-06-21 16:16) @lasted(5m40s) @project(Basic Gameplay.Dock)
  ✔ docked Gamestate @done(20-06-21 17:48) @project(Basic Gameplay.Dock)
  ✔ undock command @done(20-06-22 06:24) @project(Basic Gameplay.Dock.Docked View Handler)
  ✔ help command @done(20-06-22 06:24) @project(Basic Gameplay.Dock.Docked View Handler)
  ✘ menu command @cancelled(20-06-22 05:58) @project(Basic Gameplay.Dock.Docked View Handler)
  ✔ quit command @done(20-06-22 06:24) @project(Basic Gameplay.Dock.Docked View Handler)
  ✔ When docked, the location in the view state may not correspond to an actual island location @done(20-06-22 06:20) @project(Weird Edge Case Behavior)
  ✔ set heading @started(20-06-19 07:19) @done(20-06-19 23:14) @lasted(15h55m11s) @project(Basic Avatar/World Functionality)
  ✔ move @done(20-06-19 23:14) @project(Basic Avatar/World Functionality)
  ✔ account for turns @done(20-06-21 11:46) @project(Basic Avatar/World Functionality)
  ✘ A horror game where you poison detectives to unlock achievements. @cancelled(20-06-19 08:01) @project(Krassjam)
  ✔ A ______ game where you ride horses with thugs to make a name for yourself. @done(20-06-19 23:14) @project(Krassjam)
  ✘ A god game where you raise charts to become successful. @cancelled(20-06-19 08:13) @project(Krassjam)
    Test Driven Devlopment in F# of a Text-Based Seaborne Trading Simulation Game